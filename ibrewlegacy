#!/usr/bin/env python
# -*- coding: utf-8 -*-

from iBrewFolders import AppFolders
from smarter.SmarterProtocol import *
import time
import socket
import sys
import os
from  ConfigParser import *

#------------------------------------------------------
# iBrew: iKettle Interface
#
# Legacy Edtion
#
# https://github.com/Tristan79/iBrew
#
# Copyright © 2016-2017 Tristan (@monkeycat.nl). All Rights Reserved
#
# The conundrum struggle
#------------------------------------------------------



ip         = "192.168.4.1"
bufferSize = 40

iBrewApp          = "iBrew: Legacy iKettle Interface"
iBrewInfo         = "iBrew: The conundrum struggle © 2016-2017 Tristan (@monkeycat.nl). All Rights Reserved"
iBrewContribute   = "Please DONATE! Food, jokes, hugs and fun toys! To someone who deserves it!\n\nContribute any discoveries on https://github.com/Tristan79/iBrew/issues\n\nThis is untested code. Please report your findings!!! "

username  = "Legacy"


def app_info():
    print iBrewApp
    print iBrewInfo
    print
    print iBrewContribute
    print

def usage():
        print
        print "Usage: ibrewlegacy command host"
        print
        print "Commands"
        print "    heat  " + textHeat
        print "    stop  " + textStop
        print "      65  " + text65c
        print "      80  " + text80c
        print "      95  " + text95c
        print "     100  " + text100c
        print "    warm  " + textWarm
        print "       5  " + textWarm5m
        print "      10  " + textWarm10m
        print "      20  " + textWarm20m
        print "  status  " + textStatus
        print 
        print "    host  ip or host address of the iKettle"
        print


try:
    action = str(sys.argv[1])
    ip = str(sys.argv[2])
except IndexError:
    app_info()
    usage()
    sys.exit(2);
else: 
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        s.settimeout(2)
        s.connect((ip, Smarter.legacyPort))
    except socket.timeout:
        print "iBrew: Could not connect to " + str(ip)
        sys.exit(3)

    s.send(Smarter.legacyCommandHandshake)
    data = s.recv(bufferSize)

    if len(data) < 8:
        print "iBrew: No kettle found at " + str(ip)
        sys.exit(4);

    if data[0:8] != Smarter.legacyResponseHandshake[0:8]:
        print "iBrew: No kettle found at " + str(ip)
        sys.exit(4);

    if action == "stop":
        print "Sending: " + Smarter.legacyTextStop
        s.send(Smarter.legacyCommandStop)
    elif action == "heat" or action == "start":
        print "Sending: " + Smarter.legacyTextHeat
        s.send(Smarter.legacyCommandHeat)
    elif action == "status":
        print "Sending: " + Smarter.legacyTextStatus
        s.send(Smarter.legacyCommandStatus)
    elif action == "65":
        print "Sending: " + Smarter.legacyText65c
        s.send(Smarter.legacyCommand65c)
    elif action == "80":
        print "Sending: " + Smarter.legacyText80c
        s.send(Smarter.legacyCommand80c)
    elif action == "95":
        print "Sending: " + Smarter.legacyText95c
        s.send(Smarter.legacyCommand95c)
    elif action == "100":
        print "Sending: " + Smarter.legacyText100c
        s.send(Smarter.legacyCommand100c)
    elif action == "warm":
        print "Sending: " + Smarter.legacyTextWarm
        s.send(Smarter.legacyCommandWarm)
    elif action == "5":
        print "Sending: " + Smarter.legacyTextWarm5m
        s.send(Smarter.legacyCommandWarm5m)
    elif action == "10":
        print "Sending: " + Smarter.legacyTextWarm10m
        s.send(Smarter.legacyCommandWarm10m)
    elif action == "20":
        print "Sending: " + Smarter.legacyTextWarm20m
        s.send(Smarter.legacyCommandWarm20m)
    else:
        print "iBrew: Unknown command: (%s)" % sys.argv[1]

    try:
        data = s.recv(bufferSize)
        print "Received 1: " + Smarter.string_status(data[0:len(data)-1])
        data = s.recv(bufferSize)
        print "Received 2: " + Smarter.string_status(data[0:len(data)-1])
        data = s.recv(bufferSize)
        print "Received 3: " + Smarter.string_status(data[0:len(data)-1])
        
    except socket.timeout:
         pass #print "\niBrew: Did you see reply messages? Please report on https://github.com/Tristan79/iBrew/issues, which reply messages are received and which command is used!"
    s.close()