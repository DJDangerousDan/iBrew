#!/usr/bin/env python
# -*- coding: utf-8 -*-

from iBrewFolders import AppFolders
from smarter.SmarterProtocol import *
import time
import socket
import sys
import os
from  ConfigParser import *

#------------------------------------------------------
# iBrew: iKettle Interface
#
# Legacy Edtion
#
# https://github.com/Tristan79/iBrew
#
# Copyright © 2016 Tristan (@monkeycat.nl)
#
# The conundrum struggle
#------------------------------------------------------



ip         = "192.168.4.1"
port       = 2000
bufferSize = 40

commandHandshake    = "HELLOKETTLE\n"
replyHandshake      = "HELLOAPP"

# Command messages
commandStatus       = "get sys status\n"
commandHeat         = "set sys output 0x4\n"
command65c          = "set sys output 0x200\n"
command80c          = "set sys output 0x4000\n"
command95c          = "set sys output 0x2\n"
command100c         = "set sys output 0x80\n"
commandWarm5m       = "set sys output 0x8005\n"
commandWarm10m      = "set sys output 0x8010\n"
commandWarm20m      = "set sys output 0x8020\n"
commandWarm         = "set sys output 0x8\n"
commandStop         = "set sys output 0x0\n"

# Command text
textHeat            = "Start heating water"
textStop            = "Stop heating water"
textStatus          = "Kettle status"

# Shared between status and command
text100c            = "100ºC selected"
text95c             = "95ºC selected"
text80c             = "80ºC selected"
text65c             = "65ºC selected"
textWarm            = "Keep water warm" # for 30 minutes???
textWarm5m          = "Keep water warm timer is set to 5 minutes"
textWarm10m         = "Keep water warm timer is set to 10 minutes"
textWarm20m         = "Keep water warm timer is set to 20 minutes"

# Status text
textHeating         = "Heating water"
textReady           = "Ready"
textHeated          = "Water heated"
textOverheat        = "Kettle overheated"
textKettleRemoved   = "Kettle removed"
textWarmFinished    = "Keep water warm finished"

# Status messages
status100c          = "sys status 0x100"
status95c           = "sys status 0x95"
status80c           = "sys status 0x80"
status65c           = "sys status 0x65"
statusWarm          = "sys status 0x11"
statusWarmFinished  = "sys status 0x10"
statusHeating       = "sys status 0x5"
statusReady         = "sys status 0x0"
statusWarm5m        = "sys status 0x8005"
statusWarm10m       = "sys status 0x8010"
statusWarm20m       = "sys status 0x8020"
statusHeated        = "sys status 0x3"
statusOverheat      = "sys status 0x2"
statusKettleRemoved = "sys status 0x1"

replyStatus         = "sys status key="

def decode_replyStatus(status):

    def is_set(x, n):
        return x & 2**n != 0

    if len(replyStatus) == len(status):
        return textReady

    statusdata = Smarter.raw_to_number(status[len(replyStatus)])

    print "Debug status: " + str(statusdata)
    statustext = ""
    if is_set(statusdata,0):
        statustext += textHeating + " "
    if is_set(statusdata,1):
        statustext += textWarm + " "
    if is_set(statusdata,2):
        statustext += text65c + " "
    if is_set(statusdata,3):
        statustext += text80c + " "
    if is_set(statusdata,4):
        statustext += text95c + " "
    if is_set(statusdata,5):
        statustext += text100c + " "
    return statustext.strip()

def decode_status(status):
    if status[0:len(replyStatus)] == replyStatus:
        return decode_replyStatus(status)
    elif status == status100c:
        return text100c
    elif status == status95c:
        return text95c
    elif status == status80c:
        return text80c
    elif status == status65c:
        return text65c
    elif status == statusWarm:
        return textWarm
    elif status == statusWarmFinished:
        return textWarmFinished
    elif status == statusHeating:
        return textHeating
    elif status == statusReady:
        return textReady
    elif status == statusWarm5m:
        return textWarm5m
    elif status == statusWarm10m:
        return textWarm10m
    elif status == statusWarm20m:
        return textWarm20m
    elif status == statusHeated:
        return textHeated
    elif status == statusOverheat:
        return textOverheat
    elif status == statusKettleRemoved:
        return textKettleRemoved
    else:
        return "Unknown status please report in the issues on github" + str([status])


iBrewApp          = "iBrew: Legacy iKettle Interface"
iBrewInfo         = "iBrew: The conundrum struggle © 2016 Tristan (@monkeycat.nl)"
iBrewContribute   = "Please DONATE! Food, jokes, hugs and fun toys! To someone who deserves it!\n\nContribute any discoveries on https://github.com/Tristan79/iBrew/issues\n\nThis is untested code. Please report your findings!!! "

username  = "Legacy"

def check_license():
    global username
    if not os.path.isfile(AppFolders.settings() + '/.ibrew'):
        username = "NOT ACCEPTED"
        self.app_info()
        print
        print "PLEASE READ THE FOLLOWING VERY CAREFULLY"
        print
        print
        print "LICENSE " + iBrewApp
        print
        print Smarter.license()
        print
        print
        print "NOTE: THIS IS OFFLINE! NO INFORMATION WILL BE SHARED WITH ANYONE!"
        print
        print
        print "LICENSING AGREEMENT"
        try:
            username = raw_input("Please enter your full name: ").strip()
            c = 0
            while not (' ' in username):
                c += 1
                if c > 2:
                    print "Forgot your full name?"
                    return False
                print "That is not your full name!"
                username = raw_input("Please enter your full name: ").strip()
            c = 0
            email = raw_input(self.username + ", please enter your email address: ").strip()
            while (not re.match(r"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)",email)):
                c += 1
                if c > 2:
                    print "Forgot your email address?"
                    return False
                print "Invalid email"
                email = raw_input(self.username + ", please enter your email: ").strip()
            c = 0
            accept = raw_input("You accept the license? Please answer with YES or NO followed by pressing the ENTER key: ").strip()
            while (accept.upper() != "YES"):
                if accept.upper() == "NO":
                    return False
                c += 1
                if c > 2:
                    print "You decided to not to agree!"
                    return False
                email = raw_input("Please answer with YES or NO followed by pressing the ENTER key: ").strip()
        except Exception:
            print "You decided to not to agree!"
            return False
        print "Thank you, "+ username +" for accepting!"
        print
    
        config = SafeConfigParser()
        config.read(AppFolders.settings() + '/.ibrew')
    
        try:
            config.add_section('license')
        except Exception:
            pass

        config.set('license', 'accepted', 'true')
        config.set('license', 'name', self.username)
        config.set('license', 'email', email)
        with open(AppFolders.settings() + '/.ibrew', 'w') as f:
            config.write(f)
    else:
        config = SafeConfigParser()
        config.read(AppFolders.settings() + '/.ibrew')
        try:
            username =  config.get('license','name')
        except Exception:
            username = "NOT ACCEPTED"
    return True



def app_info():
    print iBrewApp
    print iBrewInfo
    if username != "NOT ACCEPTED":
        print "iBrew: LICENSING AGREEMENT accepted by LICENSEE " + username
    print
    print iBrewContribute
    print



def usage():
        print
        print "Usage: ibrewlegacy command host"
        print
        print "Commands"
        print "    heat  " + textHeat
        print "    stop  " + textStop
        print "      65  " + text65c
        print "      80  " + text80c
        print "      95  " + text95c
        print "     100  " + text100c
        print "    warm  " + textWarm
        print "       5  " + textWarm5m
        print "      10  " + textWarm10m
        print "      20  " + textWarm20m
        print "  status  " + textStatus
        print 
        print "    host  ip or host address of the iKettle"
        print


if True: #check_license():
    try:
        action = str(sys.argv[1])
        ip = str(sys.argv[2])
    except IndexError:
        app_info()
        usage()
        sys.exit(2);
    else: 
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            s.settimeout(2)
            s.connect((ip, port))
        except socket.timeout:
            print "iBrew: Could not connect to " + str(ip)
            sys.exit(3)

        s.send(commandHandshake)
        data = s.recv(bufferSize)

        if len(data) < 8:
            print "iBrew: No kettle found at " + str(ip)
            sys.exit(4);

        if data[0:8] != replyHandshake[0:8]:
            print "iBrew: No kettle found at " + str(ip)
            sys.exit(4);

        if action == "stop":
            print "Sending: " + textStop
            s.send(commandStop)
        elif action == "heat" or action == "start":
            print "Sending: " + textHeat
            s.send(commandHeat)
        elif action == "status":
            print "Sending: " + textStatus
            s.send(commandStatus)
        elif action == "65":
            print "Sending: " + text65c
            s.send(command65c)
        elif action == "80":
            print "Sending: " + text80c
            s.send(command80c)
        elif action == "95":
            print "Sending: " + text95c
            s.send(command95c)
        elif action == "100":
            print "Sending: " + text100c
            s.send(command100c)
        elif action == "warm":
            print "Sending: " + textWarm
            s.send(commandWarm)
        elif action == "5":
            print "Sending: " + textWarm5m
            s.send(commandWarm5m)
        elif action == "10":
            print "Sending: " + textWarm10m
            s.send(commandWarm10m)
        elif action == "20":
            print "Sending: " + textWarm20m
            s.send(commandWarm20m)
        else:
            print "iBrew: Unknown command: (%s)" % sys.argv[1]

        try:
            data = s.recv(bufferSize)
            print "Received 1: " + decode_status(data[0:len(data)-1])
            data = s.recv(bufferSize)
            print "Received 2: " + decode_status(data[0:len(data)-1])
            data = s.recv(bufferSize)
            print "Received 3: " + decode_status(data[0:len(data)-1])
            
        except socket.timeout:
             pass #print "\niBrew: Did you see reply messages? Please report on https://github.com/Tristan79/iBrew/issues, which reply messages are received and which command is used!"
        s.close()