#!/usr/bin/python
# -*- coding: utf8 -*

import sys
import random
import time
import datetime

from SmarterClient import *
from SmarterProtocol import *
from SmarterHelp import *
from Domoticz import *

#------------------------------------------------------
# iBrew
#
# Interface to iKettle 2.0 & Smarter Coffee Devices
#
# https://github.com/Tristan79/iBrew
#
# 2016 Copyright © 2016 Tristan (@monkeycat.nl)
#
# White Tea Leaf Edition (rev 4)
#------------------------------------------------------


#------------------------------------------------------
# iBrew VERSION INFORMATION
#------------------------------------------------------


iBrewApp          = "iBrew: iKettle 2.0 & Smarter Coffee Interface"
iBrewInfo         = "Noir Tea Sweet v0.2a © 2016 Tristan (@monkeycat.nl)"
iBrewDonate       = "Please donate (for) a (working) Smarter Coffee (interface)"


class iBrewConsole:

    #------------------------------------------------------
    # iBrew MONITOR
    #------------------------------------------------------
    # assume we're connected to a client! we're printing
    # every message received. you can stop the monitor by
    # pressing ctrl-c, the only messages we expect to
    # receive is a response message 14 (status device),
    # if there are any other messages we print them too!
    
    def monitor(self):
        print "iBrew: Press ctrl-c to stop"
        
        dump = self.client.dump
        self.client.dump = True
        # repeat until...
        previousResponse = ""
        while True:
            # ...we catch ctrl-c, lets try...
            try:
                # ...read response message (every second or so)...
                response = self.client.read()
                
                # ...if the response is the same as before then skip...
                
                # this is possible due to that response message 14 (status device)
                # is the only one repeated after eachothers
                # and we are not interested in anything but changes!
                
                if previousResponse != response:
                    previousResponse = response
                    # ...else got one! yeah! print it!
            except:
                break
        self.client.dump = dump
                


    #------------------------------------------------------
    # iBrew DOMOTICZ
    #------------------------------------------------------
    # See monitor
    
    def domoticz_bridge(self, server, name, sleep = 0, secure=False):
        
        if not self.client.isKettle:
            print "iBrew: Smarter Coffee not supported"
            return
        
        domoticz = Domoticz(server,secure)
        
        if domoticz.use_virtual_hardware("Smarter"):

            temp_name    = name + " Water Temperature"
            temp_type    = domoticz.SensorTemperature
            offbase_name = name + " Base"
            offbase_type = domoticz.SensorSwitch
            water_name   = name + " Water Height"
            water_type   = domoticz.SensorCustom
            
            #default_temp_name = name + " Default Temperature"
            #default_temp_type = domoticz.SensorSwitch
            #default_temp_form_name = name + " Default Formula Temperature"
            #default_temp_form_type = domoticz.SensorSwitch
            

            status_name = name + " Status"
            status_type = domoticz.SensorSwitch
            
            water_idx   = domoticz.use_virtual_custom_water(water_name,"")
            temp_idx    = domoticz.use_virtual_temperature(temp_name)
            offbase_idx = domoticz.use_virtual_motion(offbase_name)
            status_idx  = domoticz.use_virtual_text(status_name)
            
            #default_temp_idx = domoticz.use_virtual_heat_dimmer(default_temp_name)
            #default_temp_form_idx = domoticz.use_virtual_heat_dimmer(default_temp_form_name)
            
            #if default_temp_form_idx == "None" or default_temp_idx == "None" or
            if status_idx == "None" or offbase_idx == "None" or temp_idx == "None" or water_idx == "None":
                print "iBrew: Failed to get Sensor IDX"
                return
            
            print "iBrew: Using " + domoticz.print_type(temp_type) + " sensor ["+ temp_name + "] IDX " + str(temp_idx)
            print "iBrew: Using " + domoticz.print_type(water_type) + " sensor ["+ water_name + "] IDX " + str(water_idx)
            print "iBrew: Using " + domoticz.print_type(offbase_type) + " sensor ["+ offbase_name + "] IDX " + str(offbase_idx)
            print "iBrew: Using " + domoticz.print_type(status_type) + " sensor ["+ status_name + "] IDX " + str(status_idx)
            #print "iBrew: Using " + domoticz.print_type(default_temp_type) + " sensor ["+ default_temp_name + "] IDX " + str(default_temp_idx)
            #print "iBrew: Using " + domoticz.print_type(default_temp_form_type) + " sensor ["+ default_temp_form_name + "] IDX " + str(default_temp_form_idx)
        else:
            print "iBrew: Could not find hardware"
            return


        print "iBrew: Domoticz Bridge: Press ctrl-c to stop"

        previousResponse = ""
        previousWaterSensor = 0
        previousStatus = "Unknown"
        
        prevPreviousTemperature = self.client.temperature
        previousTemperature = self.client.temperature
        previousAverage = self.client.temperature
        
        previousBase = False
        previousBaseFirst = True

        while True:
            try:
                stamp = datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d %H:%M:%S')
                print stamp + " ♨"

                response = self.client.read()
                #self.client.print_short_status()
               
                average = int(round(float((float(previousTemperature) + float(prevPreviousTemperature) + float(self.client.temperature))/3),0))

                #print prevPreviousTemperature
                #print previousTemperature
                #print self.client.temperature
                #print "TEMP: " + str(previousAverage)
                #print "TEMP: " + str(average)
                if previousAverage != average:
                    if domoticz.set_temperature(temp_idx,average):
                        print stamp + " Water temperature: " + str(average) + "ºC"
                    previousAverage = average
                
                prevPreviousTemperature = previousTemperature
                previousTemperature = self.client.temperature
                
                
                if previousResponse == response:
                    continue
                previousResponse = response
                

                if previousStatus != self.client.kettleStatus:
                    status = Smarter.status_kettle_description(self.client.kettleStatus)
                    if domoticz.set_text(status_idx,status):
                        print stamp + " iKettle 2.0 is " + status.lower()
                    previousStatus = self.client.kettleStatus
            
                if previousWaterSensor - 3 > self.client.waterSensor or previousWaterSensor + 3 < self.client.waterSensor:
                    if domoticz.set_custom(water_idx,self.client.waterSensor):
                        print stamp + " Water height: " + str(self.client.waterSensor)
                    previousWaterSensor = self.client.waterSensor
                
                if previousBaseFirst or (previousBase != self.client.onBase):
                    if domoticz.set_motion(offbase_idx,self.client.onBase):
                        if self.client.onBase:
                            s = "on"
                        else:
                            s = "off"
                        print stamp + " iKettle 2.0 is " + s + " base"
                    previousBase = self.client.onBase
                    previousBaseFirst = False
                    
            except:
                break
        
    
    #------------------------------------------------------
    # iBrew SWEEP
    #------------------------------------------------------

    # assume we're connected to a client
    # you can stop the sweep by pressing ctrl-c
    def sweep(self,start=1):
        if int(start) <= 0 or start > 256:
            print 'iBrew: sweep start out of range [00..ff]'
            return
        print "iBrew: Press ctrl-c to stop"
 
        dump = self.client.dump
        self.client.dump = True

        for id in range(int(start),256):
            try:
                # known command/message?
                known = Smarter.message_is_known(id)
                # know command for other device except itself?
                if not known:
                
                    # add zero here...
                    print "iBrew: Testing Command: " + Smarter.number_to_code(id)

                    # button pressed quit...
                    self.client.send(Smarter.number_to_raw(id))

                    # check if got status message... FIX
                    if self.client.commandStatus != Smarter.StatusInvalid:
                        print "iBrew: New Command Found: " + Smarter.number_to_code(id)
                    self.client.dump = False
                    self.client.device_stop()
                    self.client.dump = True
            except:
                break;
        self.client.dump = dump

    #------------------------------------------------------
    # iBrew Console MAIN LOOP
    #------------------------------------------------------

    def __init__(self,host,arguments=""):
        command = arguments.lower().strip()
        commandCase = arguments.strip()
        
        if command == "console" or command[0:5] == "sweep" or command == "monitor" or command[0:9] == "domoticz ":
            self.joke()
            self.app_info()
        
        dump = False
        if "dump" in command:
            dump = True
            command = command.replace("dump","").strip()
            commandCase = commandCase.replace("dump","").strip()
        
        if command == "help" or command == "?":
            self.usage()
            self.commands()
            return
        if command == "usage":
            self.usage()
            return
            
        # for README.md
        if command == "commands":
            self.commands()
            return
        if command == "messages all":
            SmarterHelp.all()
            return
        
        if command == "protocol":
            SmarterHelp.protocol()
            return
        if command == "structure":
            SmarterHelp.structure()
            return
        if command == "notes":
            SmarterHelp.notes()
            return
        if command == "domoticz":
            self.domoticz()
            return
        if command == "examples":
            self.examples()
            return
        if command == "messages":
            SmarterHelp.messages()
            return
        if command[0:8] == "message ":
            try:
                SmarterHelp.message(Smarter.code_to_number(command[8:11]))
            except:
                print "iBrew: Message range [00..FF], got " + command
            return

        client = SmarterClient(host,dump)
        if command == "list":
            devices = client.find_devices()
            for i in range(0,len(devices)):
                print "iBrew: Found " + Smarter.raw_to_device(Smarter.number_to_raw(devices[i][1])) + " v" + str(devices[i][2]) + " [" + devices[i][0] + "]"
            return
        
        try:
            self.client = client
            client.connect()
        except:
            print "iBrew: Could not connect"
            return

        if command == "console" or command[0:5] == "sweep" or command == "monitor" or command[0:8] == "domoticz":
            client.print_connect_status()
            client.print_status()
        if command == "console":
            command = ""
            commandCase = ""
            self.intro()

        cursor = client.host + ":" + client.device + "$"
        lastreply = ""

        loop = True
        while loop:
            try:
                # are we command line or console?
                if (command==""):
                    inputCase = raw_input(cursor).strip()
                    input = inputCase.lower()
                else:
                    input = command
                    inputCase = commandCase
                    loop = False
                

                # iKettle 2.0 Commands
                if input == "heat":
                     print "iBrew: Not Fully Implemented"
                     client.kettle_heat()
                elif input == "formula":
                     print "iBrew: Not Fully Implemented"
                     client.kettle_formula_heat()
                elif input == "default":
                    client.kettle_store_settings()
                elif input == "settings":
                    client.kettle_settings()
                    if not client.dump: client.print_kettle_settings()
                elif input[0:9] == "settings ":
                    client.kettle_store_settings()
                    print "iBrew: Not Fully Implemented"
                elif input == "calibrate":
                    client.calibrate()
                elif input == "base":
                    client.calibrate_base()
                    if not client.dump: client.print_watersensor_base()
                elif input[0:5] == "base ":
                    try:
                        client.calibrate_store_base(int(input[5:len(input)]))
                    except:
                        print "iBrew: Invalid base value"


                # WiFi Commands
                elif input == "firmware":
                    client.wifi_firmware()
                    if not client.dump: client.print_wifi_firmware()
                elif input == "leave":
                    client.wifi_leave()
                elif input == "scan":
                    client.wifi_scan()
                    if not client.dump: client.print_wireless_networks()

                elif input[0:5] == "join ":
                    arguments = inputCase[5:len(inputCase)]
                    try:
                        network  = arguments.split(" ")[0]
                        password = arguments[len(network)+1:len(arguments)]
                    except:
                        print "iBrew: problem with domoticz arguments " + arguments
                    client.wifi_join(network,password)


                # Process Smarter Commands
                # Hotplate
                elif input == "hotplate on":
                    client.coffee_hotplate_on()
                elif input[0:12] == "hotplate on ":
                    client.coffee_hotplate_on()
                    try:
                        Smarter.check_hotplate(self,input[12:len(input)])
                    except:
                        print "iBrew: Hotplate timer is between 5 and 30 minutes"
                elif input == "hotplate off":
                    client.coffee_hotplate_off()
                elif input[0:8] == "hotplate":
                    print "iBrew: Use on or off as argument"
                # Grinder
                elif input == "grinder":
                    client.coffee_grinder()
                # Brew
                elif input == "brew":
                    print "iBrew: Not Fully Implemented"
                    client.coffee_brew()
                # Strength
                elif input[0:9] == "strength ":
                    # double code FIX remove...
                    if input[9:14] == "weak":
                        client.coffee_strength("weak")
                    elif input[9:16] == "strong":
                        client.coffee_strength("strong")
                    elif input[9:16] == "medium" or input[9:16] == "normal":
                        client.coffee_strength("medium")
                    else:
                        print "iBrew: Use weak, medium or strong as argument"
                elif input[0:8] == "strength":
                    print "iBrew: Use weak, medium or strong as argument"
                # Cups
                elif input[0:5] == "cups ":
                    try:
                        x = Smarter.check_cups(int(input[5:len(input)]))
                    except:
                        print "iBrew: Use 1..12 as range in cups argument"
                        continue
                    client.coffee_cups(x)
                elif input[0:4] == "cups":
                    print "iBrew: Use 1..12 as range in cups argument"


                # Console Commands
                elif input == "exit" or input == "quit":
                    break
                elif input[0:9] == "domoticz ":
                    arguments = inputCase[9:len(inputCase)]
                    try:
                        server = arguments.split(" ")[0]
                        name   = arguments[len(server)+1:len(arguments)]
                    except:
                        print "iBrew: problem with domoticz arguments " + arguments
                    self.domoticz_bridge(server,name)
                elif input == "domoticz":
                    self.domoticz()
                elif input == "list":
                    devices = client.find_devices()
                    for i in range(0,len(devices)):
                        print "Found " + Smarter.raw_to_device(Smarter.number_to_raw(devices[i][1])) + " v" + str(devices[i][2]) + " [" + devices[i][0] + "]"
                
                elif input == "monitor":
                    self.monitor()
                elif input == "sweep":
                    self.sweep()
                elif input[0:6] == "sweep ":
                    try:
                        id = Smarter.code_to_number(input[6:8],16)
                    except:
                        print "iBrew: Invalid start command"
                        continue
                    self.sweep(id)
                elif input == "joke" or input == "quote":
                    print
                    self.joke()
                    print
                elif input == "help" or input == "?":
                    self.commands()
                elif input == "protocol":
                    SmarterHelp.protocol()
                elif input == "dump":
                    if client.dump:
                        client.dump = False
                        print "iBrew: Dump raw messages disabled"
                    else:
                        client.dump = True
                        print "iBrew: Dump raw messages enabled"
                elif input == "examples":
                    self.examples()
                elif input == "structure":
                    SmarterHelp.structure()
                elif input == "notes":
                    SmarterHelp.notes()
                elif input == "messages all":
                    SmarterHelp.all()
                elif input == "messages":
                    SmarterHelp.messages()
                elif input[0:8] == "message ":
                    try:
                        SmarterHelp.message(Smarter.code_to_number(input[8:11]))
                    except:
                        print "iBrew: Message range [00..FF], got " + input[8:11]

                # iKettle 2.0 & Smarter Coffee Commands
                elif input == "on" or input == "start"  :
                    if client.isKettle:
                        client.kettle_heat()
                    elif client.isCoffee:
                        client.coffee_brew()
                elif input == "stop" or input == "off":
                    client.device_stop()
                elif input == "reset":
                    client.device_reset()
                elif input == "info":
                    client.device_info()
                    if not client.dump: client.print_info()
                elif input == "history":
                    client.device_history()
                    if not client.dump: client.print_history()
                elif input[0:5] == "time ":
                    print "Not yet implemented"
                    #client.device_time()
                elif len(input) > 0 and input != "status":
                    try:
                        client.device_raw(input)
                    except:
                        print "iBrew: Sending codes failed"
            
                client.read()
                if input == "status":
                    client.print_status()
                else:
                    if not client.dump and loop: client.print_short_status()
            except:
                break
        print

#------------------------------------------------------
# iBrew Console PRINT
#------------------------------------------------------
    def app_info(self):
        print iBrewApp
        print iBrewInfo
        print
        print iBrewDonate
        print

    def intro(self):
        print
        print "For list of commands type: help and press enter"
        print "Press enter for status update and press ctrl-c to quit"
        print

    def usage(self):
        print
        print "  Usage: iBrew (dump) [command] (host)"
        print
        print "    host                   host address (format: ip4, ip6, fqdn)"
        print "    dump                   dump message enabled"
        print "    command                action to take!"
        print

    def commands(self):
        print
        print "  iKettle 2.0 & Smarter Coffee Commands"
        print "    info                   device info"
        print "    history                action history"
        print "    list                   list detected devices"
        print "    reset                  reset device to default"
        print "    start                  start the device"
        print "    status                 show status"
        print "    stop                   stop the device"
        print "    time [time]            set the device time"
        print "    [hexdata]              send raw data to device (e.g. \'64 7e\')"
        print
        print "  iKettle 2.0 Commands"
        print "    base                   show watersensor base value"
        print "    base [base]            store watersensor base value"
        print "    calibrate              calibrates watersensor"
        print "    default                set default settings"
        print "    formula ()()           heat kettle in formula mode"
        print "    heat ()()              heat kettle"
        print "    settings               show user settings"
        print "    settings [] [] [] []   store user settings"
        print
        print "  Smarter Coffee Commands"
        print "    brew                   brew coffee"
        print "    cups [number]          set number of cups [1..12]"
        print "    grinder                toggle grinder"
        print "    hotplate off           turn hotplate off"
        print "    hotplate on (minutes)  turn hotplate on (time in minutes)"
        print "    strength [strength]    set strength coffee [weak, medium or strong]"
        print
        print "  Wireless Network Commands"
        print "    join [net] [pass]      connect to wireless network"
        print "    leave                  disconnect (and open direct mode)"
        print "    scan                   scan wireless networks"
        print
        print "  Protocol Help Commands"
        print "    examples               show examples of commands"
        print "    messages               show all known protocol messages"
        print "    message [id]           show protocol message detail of message [id]"
        print "    notes                  show developer notes on the devices"
        print "    structure              show protocol structure information"
        print
        print "  Bridge Commands"
        print "    domoticz               show domoticz bridge help"
        print
        print "  Debug Commands"
        print "    dump                   toggle \'dump raw messages\'"
        print "    console                start console [Command line only]"
        print "    firmware               show firmware Wifi"
        print "    monitor                monitor incomming traffic"
        print "    protocol               show all protocol information available"
        print "    sweep (id)             try (all or start with id) unknown command codes"
        print
        print "  Console Commands"
        print "    joke                   show joke"
        print "    quit                   quit console [Console only]"
        print

    def domoticz(self):
        print """

  Domoticz Bridge
  _______________


  Bridge between iKettle 2.0 and domoticz. Its auto-creates 4 devices in domoticz, if not yet created,
  and monitors the kettle and update the domoticz devices accordingly.
  
    Water Temperature in ºC (temperature device)
    Water Height (custom device)
    Kettle on base (motion device)
    Kettle status (text device)
    
  Currently you have to create your boil, brew switches yourself (working on it), so:
  
    Place or link iBrew in your domoticz script folder or somewhere readable and reachable.
    Run iBrew in domoticz bridge mode to auto create the 'smarter' dummy hardware.
    Go to [SETUP] [HARDWARE] press 'create virtual sensors' on the dummy hardware called 'smarter'
    Give it a name (e.g. Kettle Boil) and select sensor type is switch.
    Go to [SWITCHES], scroll all the way down.
    Select 'edit' on your newly created device.
      Switch Icon, well heating is nice!
      On Action:  script://locationibrew/iBrew on kettleip
      Off Action: script://locationibrew/iBrew off kettleip
      
    You now have a functional boil/stop switch... 
    
    If you do not want a switch you can also create two push (on/off) buttons
    and fill in the action.
  
  If you use homebridge for domoticz (https://www.domoticz.com/forum/viewtopic.php?t=10272) you can use
  apple homekit with the kettle. You have to create extra virtual sensor (motion boil???) because the text sensor is not supported
  by homekit, all the other are.
  

  Usage:

    domoticz [domoticz] [basename] [kettle]

  Where:
  
    domoticz        Connection string to domoticz, [host:port] or [username:password@host:port]
    basename        Base name of your kettle devices in domoticz. The name may contain spaces.
    kettle          Connection string to iKettle 2.0, [host]
    host            Format: ip4, ip6, fqdn
    

  Notes:
  
    It will auto-create the devices in Domoticz
    Tested on Domoticz v3.52
    *** Currently iKettle 2.0 Only ***
  
  Examples:
  
    iBrew domoticz sofia:$ecrit@localhost:8080 Kettle Kitchen 192.168.4.1
    iBrew domoticz 10.0.0.1:9001 Kettle Office 192.168.10.13
    iBrew dump domoticz 10.0.0.1:9001 Kettle Office 192.168.10.13
    iBrew domoticz localhost:8080 Kettle 
  
              """

    def examples(self):
        print
        print "  Example:"
        print "    off            iKettle 2.0 Stop boiling"
        print "    messages       Show all protocol messages"
        print "    message 3e     Show protocol message 3a, turn hotplate on"
        print "    167E           Send iKettle 2.0 raw off"
        print "    21 30 05 7e    Send iKettle 2.0 raw on"
        print "    strength weak  Set SmarterCoffee coffee strength to weak"
        print "    cups 3         Set SmarterCoffee number of cups to brew"
        print

    teaJokes = [["What do you call a talkative drink?","Chai-tea."],
                ["How long does it take to brew chinese tea?","Oolong time."],
                ["When shouldn't you drink a hot beverage?","If it's not your cup of tea."],
                ["How does Moses make his tea?","Hebrews it."],
                ["What drink do goalies hate?","Penal-tea."],
                ["How do you ask a dinosaur to lunch?","Tea Rex?"],
                ["What does a worry wart drink?","Safe-tea."],
                ["Why did the hipster burn his tongue?","Because he drank his tea before it was cool."],
                ["What drink brings you down to earth?","Gravi-tea."],
                ["What do sophisticated fish drink?","Salt-tea."],
                ["Why did the tea bag have to do it's laundry?","Because it was stained."],
                ["What kind of music do teapots like?","Jasmine."],
                ["Why must you be careful of tea at night?","Because it might mug you."],
                ["What does a tea bag do when it's tired?","It seeps."],
                ["Why did the teapot get in trouble?","Because he was naugh-tea."],
                ["What did the teapot wear to bed?","A nightea"],
                ["What happens when an old teapot laughs too hard?","It teas its pants."],
                ["It is time to get this par tea started!","Right?"],
                ["Hello Brew-TEA-Full!!!","Your kettle"],
                ["I love to drink tea each day","It brings out my inner tranquili-tea"],
                ["Today!","Full of creativi-Tea"],
                ["It tends to break the ice very easily","Flirt-tea."],
                ["When your kettle is too","Chat-tea"],
                ["Where there is tea","There is hope!"],
                ["If tea is the drink of love","Then brew on!"],
                ["It really is a serious problem","If tea can’t fix it."],
                ["The study into soaked leafs","Teaology"],
                ["Why I have an iKettle two zero?","So my wife only has to walk, once!"]
                ]
    
    coffeeJokes =  [["Why is a bad cup of coffee the end of a marriage?","Because it's GROUNDS for divorce!"],
                ["What do you call sad coffee?","Despresso"],
                ["Did you know it's a sin for a woman to make coffee?","In the bible it says He-brews"],
                ["Why Coffee is better than a Woman?","Coffee goes down easier!"],
                ["They call me \"coffee\"","Cause I grind so fine."],
                ["Hold the sugar please","You're sweet enough for the both of us"],
                ["So I've been thinking about you a latte","Your coffee grinder"],
                ["How do you look so good before coffee?","Your coffee machine"],
                ["Why are men are like coffee?"," The best ones are rich, hot, and can keep you up all night!"],
        ]

    def joke(self):
        joke = random.choice(self.teaJokes+self.coffeeJokes)
        print "\n      \'" + joke[0] + "\'\n                  -- " + joke[1] + "\n"


#------------------------------------------------------
# iBrew COMMAND LINE
#
# Command line access for iKettle 2.0 or Smarter Coffee
# Device
#
# Redirect command line arguments to console
#------------------------------------------------------

class iBrewCommandLine:

    def is_valid_ipv4_address(self,address):
        try:
            socket.inet_pton(socket.AF_INET, address)
        except AttributeError:  # no inet_pton here, sorry
            try:
                socket.inet_aton(address)
            except socket.error:
                return False
            return address.count('.') == 3
        except socket.error:  # not a valid address
            return False

        return True

    def is_valid_ipv6_address(self,address):
        try:
            socket.inet_pton(socket.AF_INET6, address)
        except socket.error:  # not a valid address
            return False
        return True
    
    def __init__(self):
        
        arguments = len(sys.argv) - 1
       
        # Check last argument is host
        isHost = False
        if arguments > 0:
            if self.is_valid_ipv4_address(sys.argv[arguments]) or self.is_valid_ipv6_address(sys.argv[arguments]):
                host = sys.argv[arguments]
                isHost = True
            else:
                host = "192.168.4.1"
        else:
            host = "192.168.4.1"
    
        # No arguments display help
        if arguments == 0:
            command = "help"
        else:
            command = ""
            for i in range(1,len(sys.argv)-int(isHost)):
                command += sys.argv[i] + " "
        iBrewConsole(host,command)

#------------------------------------------------------
# MAIN
#------------------------------------------------------

iBrewCommandLine()